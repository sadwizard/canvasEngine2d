{"version":3,"file":"collision.js","sourceRoot":"","sources":["collision.ts"],"names":[],"mappings":"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","sourcesContent":["import { SHAPE_TYPES } from '#/constants';\nimport { TShapes, Rectangle, Circle } from '#/display/shapes/index';\n\nconst { CIRCLE, RECTANGLE } = SHAPE_TYPES;\n\nconst TCircles = Circle;\nconst TPoligons = Rectangle\n\nconst isCircle = function(obj: TShapes): obj is Circle {\n\treturn obj.type !== CIRCLE;\n}\n\nconst isRect = function(obj: TShapes): obj is Rectangle {\n\treturn obj.type !== RECTANGLE;\n}\n\nexport default class Collision {\n\t_currentCollisionPairs: Array<TShapes[]> = [];\n\n\tupdate(objects: TShapes[]) {\n\t\tconst obj = objects.filter(i => !i.static || i.visible);\n\t\tthis._currentCollisionPairs = [];\n\t\t// get all entity pairs to test for collision\n\n\t\tfor (var i = 0, len = obj.length; i < len; i++) {\n\t\t\tfor (var j = i + 1; j < len; j++) {\n\t\t\t\tthis._currentCollisionPairs.push([obj[i], obj[j]]);\n\t\t\t}\n\t\t}\n\n\t\t// test collisions\n\t\twhile (this._currentCollisionPairs.length > 0) {\n\t\t\tvar pair = this._currentCollisionPairs.shift();\n\t\t\t\n\t\t\tif (pair !== undefined && this.isColliding(pair[0], pair[1])) {\n\t\t\t\tthis.collision(pair[0], pair[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tcollision(obj1: TShapes, obj2: TShapes) {\n\t\tobj1.collision(obj2);\n\t}\n\n\tisIntersecting(obj1: TShapes, obj2: TShapes) {\n\t\tif (isCircle(obj1) && isCircle(obj2)) {\n\t\t\treturn this.circleIntersection(obj1, obj2);\n\t\t} else if (isCircle(obj1) && isRect(obj2)) {\n\t\t\treturn this.circleRectangleIntersection(obj1, obj2);\n\t\t} else if (isRect(obj1) && isCircle(obj2)) {\n\t\t\treturn this.circleRectangleIntersection(obj2, obj1);\n\t\t} else if (isRect(obj1) && isRect(obj2)) {\n\t\t\treturn this.rectangleIntersection(obj1, obj2);\n\t\t}\n\t}\n\n\tisColliding(obj1: TShapes, obj2: TShapes) {\n\t\treturn obj1 !== obj2 && this.isIntersecting(obj1, obj2);\n\t}\n\n\tcircleIntersection(obj1: Circle, obj2: Circle) {\n\t\tif ('radius' in obj1 && 'radius' in obj2) {\n\t\t\treturn obj1.position.distance(obj2.position) < (obj1.radius + obj2.radius);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tcircleRectangleIntersection(obj1: Circle, obj2: Rectangle) {\n\t\tif (obj1.type !== CIRCLE || obj2.type !== RECTANGLE) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst rectCorners = obj2.getEdgesObject();\n\t\tconst rotatedCircle = obj1.position.rotateToPoint(obj2.position, -obj2.angle);\n\n\t\tlet testX, testY;\n\n\t\t// which edge is closest?\n\t\tif (rotatedCircle.x < rectCorners.left) {\n\t\t\ttestX = rectCorners.left;\n\t\t} else if (rotatedCircle.x > rectCorners.right){\n\t\t\ttestX = rectCorners.right;\n\t\t} else {\n\t\t\ttestX = rotatedCircle.x;\n\t\t}\n\n\t\tif (rotatedCircle.y < rectCorners.top){\n\t\t\ttestY = rectCorners.top;\n\t\t} else if (rotatedCircle.y > rectCorners.bottom){\n\t\t\ttestY = rectCorners.bottom;\n\t\t} else {\n\t\t\ttestY = rotatedCircle.y;\n\t\t}\n\n\t\tconst distX = rotatedCircle.x - testX;\n\t\tconst distY = rotatedCircle.y - testY;\n\t\tconst distance = Math.sqrt((distX * distX) + (distY * distY));\n\n\t\tif (distance <= obj1.radius) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\trectangleIntersection(obj1: Rectangle, obj2: Rectangle) {\n\t\tif (obj1.angle !== 0 || obj2.angle !== 0) {\n\t\t\tconst c1 = obj1.getEdgesObject();\n\t\t\tconst c2 = obj2.getEdgesObject();\n\n\t\t\treturn !(\n\t\t\t\tc2.left > c1.right ||\n\t\t\t\tc2.right < c1.left ||\n\t\t\t\tc2.top > c1.bottom ||\n\t\t\t\tc2.bottom < c1.top\n\t\t\t)\n\t\t}\n\t\t// todo: rotated rectangle intersection\n\n\t\tconst vert1 = obj1.getTransformedVerticesObject();\n\t\tconst vert2 = obj2.getTransformedVerticesObject()\n\n\t\treturn false;\n\t}\n}\n"]}