{"version":3,"file":"rectangle.js","sourceRoot":"","sources":["rectangle.ts"],"names":[],"mappings":"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","sourcesContent":["import Vector from '#/core/vector';\nimport { isNill } from '#/utils';\nimport { Body, TBodyParams } from '../body';\nimport { TDrawer } from '#/core/render';\nimport { SHAPE_TYPES } from '#/constants';\n\nexport type TRectangleParams = TBodyParams & Pick<\n\tRectangle,\n\t'width' |\n\t'height' |\n\t'fillStyle' |\n\t'strokeStyle' |\n\t'lineWidth'\n>;\n\nexport class Rectangle extends Body {\n\twidth: number;\n\theight: number;\n\tfillStyle: string;\n\tstrokeStyle?: string;\n\tlineWidth: number;\n\n    constructor(params: TRectangleParams) {\n        super({\n\t\t\t...params,\n\t\t\ttype: SHAPE_TYPES.RECTANGLE,\n\t\t});\n\n\t\tthis.width = params.width ?? 10;\n\t\tthis.height = params.height ?? 10;\n\t\tthis.fillStyle = params.fillStyle ?? this.id;\n\t\tthis.strokeStyle = params.strokeStyle ?? undefined;\n\t\tthis.lineWidth = params.lineWidth ?? 0;\n    }\n\n    draw(drawer: TDrawer) {\n        const { position, width, height, angle, fillStyle, strokeStyle, lineWidth } = this;\n\n        drawer(position.x, position.y, angle, (ctx) => {\n            ctx.fillStyle = fillStyle;\n\n\t\t\tif (strokeStyle !== undefined) {\n                ctx.strokeStyle = strokeStyle;\n            }\n\n            ctx.lineWidth = lineWidth;\n\n            if (lineWidth > 0) {\n                ctx.rect(-(width / 2), -(height / 2), width, height);\n                ctx.stroke();\n            } else {\n                ctx.fillRect(-(width / 2), -(height / 2), width, height);\n            }\n        });\n    }\n\n    stroke(ctx: CanvasRenderingContext2D) {\n        if (this.lineWidth !== undefined) {\n            ctx.stroke();\n        }\n    }\n\n    getEdgesObject(): {\n\t\tleft: number,\n\t\ttop: number,\n\t\tright: number,\n\t\tbottom: number,\n\t} { // Clockwise\n\t\treturn {\n\t\t\tleft: this.position.x - this.width / 2,\n\t\t\ttop: this.position.y - this.height / 2,\n\t\t\tright: this.position.x + this.width / 2,\n\t\t\tbottom: this.position.y + this.height / 2,\n\t\t};\n\t}\n\n\tgetEdgesArray(): number[] {\n\t\treturn [\n\t\t\tthis.position.y - this.height / 2,\n\t\t\tthis.position.x + this.width / 2,\n\t\t\tthis.position.y + this.height / 2,\n\t\t\tthis.position.x - this.width / 2,\n\t\t];\n\t}\n\n\tgetTransformedVerticesObject(): {\n\t\ttopLeft: Vector,\n\t\ttopRight: Vector,\n\t\tbottomRight: Vector,\n\t\tbottomLeft: Vector,\n\t} {\n\t\tconst c = this.getEdgesObject();\n\n\t\treturn {\n\t\t\ttopLeft: new Vector(c.left, c.top).rotateToPoint(this.position, this.angle),\n\t\t\ttopRight: new Vector(c.right, c.top).rotateToPoint(this.position, this.angle),\n\t\t\tbottomRight: new Vector(c.right, c.bottom).rotateToPoint(this.position, this.angle),\n\t\t\tbottomLeft: new Vector(c.left, c.bottom).rotateToPoint(this.position, this.angle),\n\t\t};\n\t}\n\n\tgetTransformedVerticesArray(): Vector[] {\n\t\tconst c = this.getEdgesObject();\n\n\t\treturn [\n\t\t\tnew Vector(c.left, c.top).rotateToPoint(this.position, this.angle),\n\t\t\tnew Vector(c.right, c.top).rotateToPoint(this.position, this.angle),\n\t\t\tnew Vector(c.right, c.bottom).rotateToPoint(this.position, this.angle),\n\t\t\tnew Vector(c.left, c.bottom).rotateToPoint(this.position, this.angle),\n\t\t];\n\t}\n\n    getNormals() {\n\t\tconst vertices = this.getTransformedVerticesArray();\n\t\tlet norms = [], p1, p2, n;\n\n\t\tfor(let i = 1; i < vertices.length; i++) {\n\t\t\tlet p1 = vertices[i - 1],\n\t\t\t\tp2 = vertices[i];\n\n\t\t\tn = new Vector(p2.x - p1.x, p2.y - p1.y).normalR();\n\t\t\tnorms.push(n);\n\t\t}\n\n\t\treturn norms;\n    }\n}\n"]}