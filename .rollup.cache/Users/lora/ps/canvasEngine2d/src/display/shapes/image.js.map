{"version":3,"file":"image.js","sourceRoot":"","sources":["image.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,IAAI,EAAe,MAAM,SAAS,CAAC;AAU5C;IAA2B,yBAAI;IAM3B,eAAY,MAAoB;QAAhC,iBAqBC;;gBApBG,wCACO,MAAM,KACT,IAAI,EAAE,WAAW,CAAC,KAAK,IACzB;QAEF,KAAI,CAAC,KAAK,GAAG,MAAA,MAAM,CAAC,KAAK,mCAAI,EAAE,CAAC;QAChC,KAAI,CAAC,MAAM,GAAG,MAAA,MAAM,CAAC,MAAM,mCAAI,EAAE,CAAC;QAClC,KAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;QAEtB,IAAI,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ,EAAE;YAChC,MAAM,KAAK,CAAC,gCAAgC,CAAC,CAAC;SACjD;QAED,IAAI,KAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YAChC,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,GAAqB;gBAChD,KAAI,CAAC,WAAW,GAAG,GAAG,CAAC;YAC3B,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAChB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;SACN;;IACL,CAAC;IAED,oBAAI,GAAJ,UAAK,MAAsB;QAA3B,iBAQC;QAPS,IAAA,KAA8B,IAAI,EAAhC,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAE,MAAM,YAAS,CAAC;QAEzC,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YAChC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,UAAC,GAAG;gBAC5C,GAAG,CAAC,SAAS,CAAC,KAAI,CAAC,WAAgC,EAAE,QAAQ,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YACzH,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAED,yBAAS,GAAT,UAAU,GAAW;QAArB,iBAqBC;QApBG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,IAAI,GAAG,KAAK,SAAS,EAAE;gBACnB,IAAM,UAAU,GAAG,iCAA0B,KAAI,CAAC,EAAE,MAAG,CAAC;gBACxD,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gBAC1B,MAAM,CAAC,UAAU,CAAC,CAAC;aACtB;YAED,IAAM,GAAG,GAAqB,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAEnE,GAAG,CAAC,OAAO,GAAG,UAAC,GAAG;gBACd,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC,CAAA;YAED,GAAG,CAAC,MAAM,GAAG;gBACT,OAAO,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAA;YAED,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;QAClB,CAAC,CAAC,CAAA;IACN,CAAC;IACL,YAAC;AAAD,CAAC,AA7DD,CAA2B,IAAI,GA6D9B","sourcesContent":["import Render from '#/core/render';\nimport Vector from '#/core/vector';\nimport { SHAPE_TYPES } from '#/constants';\nimport { Body, TBodyParams } from '../body';\n\ntype TImageParams = TBodyParams & Pick<\n    Image,\n    'width' |\n    'height' |\n\t'imageSource' |\n\t'src'\n>;\n\nexport class Image extends Body {\n    width: number;\n\theight: number;\n    imageSource?: HTMLImageElement;\n    src: string;\n\n    constructor(params: TImageParams) {\n        super({\n            ...params,\n            type: SHAPE_TYPES.IMAGE,\n        });\n\n        this.width = params.width ?? 10;\n        this.height = params.height ?? 10;\n        this.src = params.src;\n        \n        if (typeof params.src !== 'string') {\n            throw Error('Image should contain src param');\n        }\n    \n        if (this.imageSource === undefined) {\n            this.loadImage(this.src).then((img: HTMLImageElement) => {\n                this.imageSource = img;\n            }).catch((err: Error) => {\n                console.log(err);\n            });\n        }\n    }\n\n    draw(drawer: Render['draw']) {\n        const { position, width, height } = this;\n\n        if (this.imageSource !== undefined) {\n            drawer(this.position.x, this.position.y, 0, (ctx) => {\n                ctx.drawImage(this.imageSource as CanvasImageSource, position.x - width / 2, position.y - height / 2, width, height);\n            });\n        }\n    }\n\n    loadImage(src: string): Promise<HTMLImageElement> {\n        return new Promise((resolve, reject) => {\n            if (src === undefined) {\n                const errMessage = `Image should have src (${this.id})`;\n                console.error(errMessage);\n                reject(errMessage);\n            }\n    \n            const img: HTMLImageElement = window.document.createElement('img');\n    \n            img.onerror = (err) => {\n                console.error(err);\n                reject(err);\n            }\n\n            img.onload = () => {\n                resolve(img);\n            }\n\n            img.src = src;\n        })\n    }\n}\n"]}