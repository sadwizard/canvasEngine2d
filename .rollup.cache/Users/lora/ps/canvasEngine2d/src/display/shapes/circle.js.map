{"version":3,"file":"circle.js","sourceRoot":"","sources":["circle.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,IAAI,EAAe,MAAM,SAAS,CAAC;AAU5C;IAA4B,0BAAI;IAM5B,gBAAY,MAA8B;QAA1C,iBAWC;;gBAVG,kBAAM;YACF,IAAI,EAAE,WAAW,CAAC,MAAM;YACxB,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC5B,CAAC;QAEF,KAAI,CAAC,MAAM,GAAG,MAAA,MAAM,CAAC,MAAM,mCAAI,EAAE,CAAC;QAClC,KAAI,CAAC,SAAS,GAAG,MAAA,MAAM,CAAC,SAAS,mCAAI,KAAI,CAAC,EAAE,CAAC;QACnD,KAAI,CAAC,WAAW,GAAG,MAAA,MAAM,CAAC,WAAW,mCAAI,MAAM,CAAC;QAChD,KAAI,CAAC,SAAS,GAAG,MAAA,MAAM,CAAC,SAAS,mCAAI,CAAC,CAAC;;IACrC,CAAC;IAED,qBAAI,GAAJ,UAAK,MAAe;QACV,IAAA,KAAiE,IAAI,EAAnE,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAE,MAAM,YAAA,EAAE,SAAS,eAAA,EAAE,WAAW,iBAAA,EAAE,SAAS,eAAS,CAAC;QAE5E,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,KAAK,EAAE,UAAC,GAAG;YACtC,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;YAC1B,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC;YAC9B,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;YAC1B,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;YAC5C,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,IAAI,EAAE,CAAC;YACX,IAAI,SAAS,GAAG,CAAC,EAAE;gBACf,GAAG,CAAC,MAAM,EAAE,CAAC;aAChB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,aAAC;AAAD,CAAC,AAnCD,CAA4B,IAAI,GAmC/B","sourcesContent":["import { TDrawer } from '#/core/render';\nimport { SHAPE_TYPES } from '#/constants';\nimport { Body, TBodyParams } from '../body';\n\ntype TCircleParams = TBodyParams & Pick<\n    Circle,\n    'fillStyle' |\n    'strokeStyle' |\n\t'lineWidth' |\n\t'radius'\n>;\n\nexport class Circle extends Body {\n    fillStyle: string;\n    strokeStyle: string;\n    lineWidth: number;\n    radius: number;\n \n    constructor(params: Partial<TCircleParams>) {\n        super({\n            type: SHAPE_TYPES.CIRCLE,\n            visible: params.visible,\n            position: params.position,\n        });\n\n        this.radius = params.radius ?? 10;\n        this.fillStyle = params.fillStyle ?? this.id;\n\t\tthis.strokeStyle = params.strokeStyle ?? '#ddd';\n\t\tthis.lineWidth = params.lineWidth ?? 0;\n    }\n\n    draw(drawer: TDrawer) {\n        const { position, angle, radius, fillStyle, strokeStyle, lineWidth } = this;\n\n        drawer(position.x, position.y, angle, (ctx) => {\n            ctx.fillStyle = fillStyle;\n            ctx.strokeStyle = strokeStyle;\n            ctx.lineWidth = lineWidth;\n            ctx.beginPath();\n            ctx.arc(0, 0, radius, 0, Math.PI * 2, true);\n            ctx.closePath();\n            ctx.fill();\n            if (lineWidth > 0) {\n                ctx.stroke();\n            }\n        });\n    }\n}\n"]}