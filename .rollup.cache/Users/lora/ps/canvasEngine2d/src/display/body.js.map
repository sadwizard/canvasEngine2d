{"version":3,"file":"body.js","sourceRoot":"","sources":["body.ts"],"names":[],"mappings":"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","sourcesContent":["import Vector from '#/core/vector';\nimport { TDrawer } from '#/core/render';\nimport { TShapes } from './shapes/index';\nimport { isNill } from '#/utils';\nimport { Piece, TPieceParams } from './piece';\nimport { SHAPE_TYPES, TShapeTypes } from '#/constants';\n\nconst V = Vector;\n\nexport type TBodyParams = TPieceParams & Pick<\n\tBody,\n\t'position' |\n\t'static' |\n\t'scale' |\n\t'mass'\n>;\n\nexport class Body extends Piece {\n\tstatic: boolean;\n\tposition: Vector;\n\tscale: number;\n\tforces: Vector;\n\tacceleration: Vector;\n\tvelocity: Vector;\n\tangularVelocity: number;\n\tangularAcceleration: number;\n\tangle: number;\n\tmass: number;\n\n    constructor(params: Partial<TBodyParams>) {\n\t\tif (isNill(params.type) || isNill(params.visible)) {\n\t\t\tthrow new Error('Body required params missed!');\n\t\t}\n\n\t\tsuper({ type: params.type, visible: params.visible });\n\n\t\tthis.static = params.static ?? false;\n\t\tthis.position = params.position ?? new V(0, 0);\n\t\tthis.scale = 1;\n\t\tthis.forces = new V(0, 1);\n\t\tthis.acceleration = new V(0, 0);\n\t\tthis.velocity = new V(0, 0);\n\t\tthis.angularVelocity = 0;\n\t\tthis.angularAcceleration = 0;\n\t\tthis.angle = 0;\n\t\tthis.mass = 1;\n    }\n\n    render(drawer: TDrawer) {\n      \tthis.draw(drawer);\n    };\n\n\tdraw(render: TDrawer) {}\n\tupdateFn(body: this) {}\n\n    update(dt: number) {\n\t\tif (this.updateFn) {\n\t\t\treturn this.updateFn(this)\n\t\t}\n\n\t\tif (this.static) return\n\n\t\tconst d = dt * 0.01;\n\t\tconst prevPosition = this.position.clone();\n\t\t// console.log(new V(0, 1).toAngle(this.angle))\n\t\t// this.forces.add(new V(0, 1)) // apply gravity\n\n\t// console.log(this.forces.clone().divisionScalar(this.mass))\n\t\tthis.acceleration.add(this.forces.divScalar(this.mass));\n\t\tthis.velocity.add(this.acceleration);\n\n\t\tthis.position.add(this.velocity.clone().mulScalar(d));\n\n\t\tthis.angularVelocity = this.angularVelocity * d;\n\t\tthis.angle = this.angle + this.angularVelocity;\n\n\t\t// calc speed\n\t\t// this.speed = this.position.clone().sub(prevPosition).divisionScalar(d);\n\t\t// console.log(this.speed.magnitude())\n\t\tthis.acceleration.mulScalar(0)\n\t\t// this.velocity.multiplyScalar(0)\n    };\n\n    collision(obj: TShapes) {\n\t\tif (this.static) return;\n\n\t\t// const objPoints = obj.getTransformedVertices();\n\t\t// const n = V.getNormal(objPoints.topRight, objPoints.topLeft);\n\t\t// // console.log(360 / (2 * Math.PI) * n.angle())\n\t\t// var d = obj.position.y - obj.height / 2\n\t\t// if (this.position.y + this.radius >= d) {\n\t\t// \tthis.velocity.y *= -1;\n\t\t// \tthis.forces.add(n);\n\t\t// \tthis.position.y = d - this.radius\n\t\t// }\n\t\t// this.forces.add(new V(-110, -110));\n    }\n}\n"]}