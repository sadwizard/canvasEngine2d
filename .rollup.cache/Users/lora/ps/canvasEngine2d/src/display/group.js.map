{"version":3,"file":"group.js","sourceRoot":"","sources":["group.ts"],"names":[],"mappings":";AAAA,OAAO,MAAM,MAAM,eAAe,CAAC;AAEnC,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,KAAK,EAAgC,MAAM,SAAS,CAAC;AAE9D,OAAO,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AAW3C;IAA2B,yBAAK;IAS5B,eAAY,MAAoB;QAAhC,iBAcC;;gBAbG,kBAAM;YACF,IAAI,EAAE,WAAW,CAAC,KAAK;YACvB,OAAO,EAAE,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,mCAAI,IAAI;YAChC,MAAM,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM;SACzB,CAAC;QAEF,KAAI,CAAC,IAAI,GAAG,MAAA,MAAM,CAAC,IAAI,mCAAI,KAAI,CAAC,EAAE,CAAC;QACnC,KAAI,CAAC,QAAQ,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,QAAQ,mCAAI,IAAI,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACrD,KAAI,CAAC,KAAK,GAAG,MAAA,MAAM,CAAC,KAAK,mCAAI,CAAC,CAAC;QAC/B,KAAI,CAAC,KAAK,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,mCAAI,CAAC,CAAC;QAChC,KAAI,CAAC,MAAM,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,mCAAI,CAAC,CAAC;QAClC,KAAI,CAAC,MAAM,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,mCAAI,KAAK,CAAC;QACtC,KAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;;IACvB,CAAC;IAED,mBAAG,GAAH;QAAA,iBASC;QATG,cAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,yBAAkB;;QAClB,IAAI,CAAC,OAAO,CAAC,UAAC,IAAI;YACd,IAAI,IAAI,YAAY,KAAK,EAAE;gBACvB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;aACvC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,0BAAU,GAAV,UAAW,EAAU;QACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,EAAE,KAAK,EAAE,EAAd,CAAc,CAAC,CAAC;IACnE,CAAC;IAED,sBAAM,GAAN,UAAO,MAAe;QAAtB,iBAMC;QALG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE;YACjD,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAc;gBACjC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAA;IACN,CAAC;IAED,sBAAM,GAAN,UAAO,EAAU,EAAE,OAAuB;QACtC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,EAAzB,CAAyB,CAAC,CAAC;SAC7D;IACL,CAAC;IACL,YAAC;AAAD,CAAC,AArDD,CAA2B,KAAK,GAqD/B","sourcesContent":["import Vector from '#/core/vector';\nimport { TDrawer } from '#/core/render';\nimport { SHAPE_TYPES } from '#/constants';\nimport { Piece, TPieceParams, TUpdateOptions } from './piece';\nimport { TShapes } from './shapes/index';\nimport { zIndexComporator } from '#/utils';\n\nexport type TGroupParams = {\n    name?: string;\n    position?: Vector;\n    angle?: number;\n    width?: number;\n    height?: number;\n    static?: boolean;\n} & TPieceParams;\n\nexport class Group extends Piece {\n    name: string;\n    position: Vector;\n    angle: number;\n    children: TShapes[];\n\twidth: number;\n\theight: number;\n    static: boolean;\n\n    constructor(params: TGroupParams) {\n        super({\n            type: SHAPE_TYPES.GROUP,\n            visible: params?.visible ?? true,\n            zIndex: params?.zIndex,\n        });\n\n        this.name = params.name ?? this.id;\n        this.position = params?.position ?? new Vector(0, 0);\n        this.angle = params.angle ?? 0;\n        this.width = params?.width ?? 0;\n        this.height = params?.height ?? 0;\n        this.static = params?.static ?? false;\n        this.children = [];\n    }\n\n    add(...args: TShapes[]) {\n        args.forEach((item) => {\n            if (item instanceof Piece) {            \n                this.children.push(item);\n                this.children.sort(zIndexComporator)\n            }\n        });\n\n        return this;\n    }\n\n    removeBody(id: string) {\n        this.children = this.children.filter((item) => item.id !== id);\n    }\n\n    render(drawer: TDrawer) {\n        drawer(this.position.x, this.position.y, this.angle, () => {\n            this.children.forEach((child: TShapes) => {\n                child.render(drawer);\n            });\n        })\n    }\n\n    update(dt: number, options: TUpdateOptions) {\n        if (!this.static) {\n            this.children.forEach(child => child.update(dt, options));\n        }\n    } \n}\n"]}