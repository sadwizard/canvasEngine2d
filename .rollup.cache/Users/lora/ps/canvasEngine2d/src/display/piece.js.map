{"version":3,"file":"piece.js","sourceRoot":"","sources":["piece.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,SAAS,CAAC;AAKtC,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AAmBjC;IAMI,eAAY,MAAoB;;QAC5B,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,EAAE,GAAG,WAAW,EAAE,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,mCAAI,IAAI,CAAC;QACvC,IAAI,CAAC,MAAM,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,mCAAI,SAAS,CAAC;IAC9C,CAAC;IAEJ,oBAAI,GAAJ,UAAK,MAAsB,IAAG,CAAC;IAE5B,sBAAM,GAAN,UAAO,EAAU,EAAE,OAAuB,IAAG,CAAC;IAAA,CAAC;IAE/C,yBAAS,GAAT,UAAU,GAAY,IAAG,CAAC;IAC9B,YAAC;AAAD,CAAC,AAtBD,IAsBC","sourcesContent":["import { randomColor } from '#/utils';\nimport Render from '#/core/render';\nimport Vector from '#/core/vector';\nimport { TShapeTypes } from '#/constants';\nimport { TShapes } from './shapes/index';\nimport { isNill } from '#/utils';\n\nexport type TPieceParams = Pick<\n    Piece,\n\t'type' |\n\t'visible' |\n    'zIndex'\n>;\n\nexport interface IPiece {\n\tdraw(drawer: Render['draw']): void;\n    update(dt: number, options: TUpdateOptions): void;\n    collision(obj: TShapes): void;\n}\n\nexport type TUpdateOptions = {\n    globalGravity?: Vector \n}\n\nexport class Piece implements IPiece {\n\tid: string;\n\ttype: TShapeTypes;\n    visible?: boolean;\n    zIndex?: number; \n\n    constructor(params: TPieceParams) {\n        if (isNill(params.type)) {\n\t\t\tthrow new Error('Piece required params missed!');\n\t\t}\n\n\t\tthis.id = randomColor();\n\t\tthis.type = params.type;\n        this.visible = params?.visible ?? true;\n        this.zIndex = params?.zIndex ?? undefined;\n    }\n\n\tdraw(render: Render['draw']) {}\n\n    update(dt: number, options: TUpdateOptions) {};\n\n    collision(obj: TShapes) {}\n}\n"]}