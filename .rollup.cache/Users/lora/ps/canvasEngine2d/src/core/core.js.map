{"version":3,"file":"core.js","sourceRoot":"","sources":["core.ts"],"names":[],"mappings":"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","sourcesContent":["import { Body } from '#/display/body';\nimport Ticker from './ticker';\nimport Render from './render';\nimport Collision from '#/collisions/collision';\nimport { TShapes } from '#/display/shapes/index';\nimport { Piece } from '#/display/piece';\nimport { isNill, zIndexComporator } from '#/utils';\nimport Vector from './vector';\n\ntype TSettings = {\n    globalGravity?: Vector;\n}\n\nexport default class GameEngine {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    screen: Record<string, number>;\n    objects: Array<TShapes>;\n    tickerUpdate: Ticker;\n    tickerRender: Ticker;\n    renderer: Render;\n    collisions: Collision;\n    \n    globalGravity: Vector;\n\n    constructor(\n        node: HTMLCanvasElement,\n        width: number,\n        height: number,\n        backgroundColor: string,\n        settings?: TSettings,\n    ) {\n        if (isNill(node) || isNill(width) || isNill(height)) {\n            throw 'Default param was missed!';\n        }\n\n        this.ctx = GameEngine.getContext2d(node);\n\n        const FPS = 1000 / 60;\n\n        this.canvas = node;\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.style.backgroundColor = backgroundColor ?? '#333';\n        this.screen = {\n            w: width,\n            h: height,\n            hw: width / 2,\n            hh: height / 2,\n        };\n        this.ctx.globalAlpha = 1;\n        this.objects = [];\n        this.tickerUpdate = new Ticker(this.ctx, { FPS, tieRender: true });\n        this.tickerRender = new Ticker(this.ctx, { tieRender: false })\n        this.renderer = new Render(this.ctx);\n        this.collisions = new Collision();\n\n        this.globalGravity = settings?.globalGravity ?? new Vector(0, 1);\n\n        return this;\n    }\n\n    addBody(...args: TShapes[]) {\n        args.forEach((item) => {\n            if (item instanceof Piece) {\n                this.objects.push(item);\n                this.objects.sort(zIndexComporator);\n            }\n        });\n\n        return this;\n    }\n\n    removeBody(id: string) {\n        this.objects = this.objects.filter((item) => item.id !== id);\n    }\n\n    run() {\n        const drawer: Render['draw'] = this.renderer.draw.bind(this);\n\n        this.tickerRender.setUpdateFunc(() => {\n            this.ctx.clearRect(0, 0, this.screen.w, this.screen.h);\n            this.objects.forEach((item) => {\n                item.render(drawer);\n            });\n        });\n\n        this.tickerUpdate.setUpdateFunc((dt: number) => {\n            // this.collisions.update(this.objects);\n            const options = {\n                globalGravity: this.globalGravity,\n            };\n\n            this.objects.forEach((item) => {\n                item.update(dt, options);\n            });\n        });\n\n        this.tickerRender.start();\n        this.tickerUpdate.start();\n\n        return this;\n    }\n\n    stop() {\n        this.tickerRender.stop();\n        this.tickerUpdate.stop();\n\n        return this;\n    }\n\n    print() {\n        const drawer: Render['draw'] = this.renderer.draw.bind(this);\n\n        this.ctx.clearRect(0, 0, this.screen.w, this.screen.h);\n        this.objects.forEach((item) => {\n            item.render(drawer);\n        });\n\n        return this;\n    }\n\n    static getContext2d(node: HTMLCanvasElement): CanvasRenderingContext2D | never {\n        try {\n            const ctx = node.getContext('2d');\n\n            if (!isNill(ctx)) {\n                return ctx;\n            }\n\n            throw 'Get getContext(\"2d\") error!';\n        } catch(e) {\n            throw 'Get getContext(\"2d\") error!';\n        }\n    }\n}\n"]}